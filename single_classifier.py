import lief
import pandas as pd
from nfs.attribute_extractor import PEAttributeExtractor
import zipfile
import os, sys
from nfs.moa_adapters import *
from nfs.train_classifier import JSONAttributeExtractor, NeedForSpeedModel
from sklearn.ensemble import RandomForestClassifier
from skmultiflow.meta.adaptive_random_forests import AdaptiveRandomForest as ARFClassifier
import _pickle as cPickle
import gzip
import tempfile
import IPython

THRESHOLD = 0.75

def load_dataset(name):
	content = None
	with gzip.open(name, 'rb') as fp:
        	content = cPickle.load(fp)
	return content

br_mw_17 = load_dataset("datasets/br.17.cpkl")[:2]
cnet_gw  = load_dataset("datasets/cnet.cpkl")[:2]

training_data = pd.DataFrame(br_mw_17 + cnet_gw)
training_data2 = pd.DataFrame(br_mw_17 + cnet_gw)
training_data3 = pd.DataFrame(br_mw_17 + cnet_gw)

# WITH SKLEARN RF
clf = NeedForSpeedModel(classifier=RandomForestClassifier(n_estimators=100,random_state=0))
#clf2 = NeedForSpeedModel(classifier=MOA_RF())
#clf3 = NeedForSpeedModel(classifier=MOA_ARF())
clf.fit(training_data)
#clf2.fit(training_data2)
#clf3.fit(training_data3)

for sample in br_mw_17:
    test_sample = sample.copy()
    del test_sample['label']
    result = clf.predict_threshold(pd.DataFrame([test_sample]), THRESHOLD)[0]
    #result2 = clf2.predict_threshold(pd.DataFrame([test_sample]), THRESHOLD)[0]
    #result3 = clf3.predict_threshold(pd.DataFrame([test_sample]), THRESHOLD)[0]
    #print(result,result2,result3)
