import numpy as np
import lief
import pandas as pd
from nfs.attribute_extractor import PEAttributeExtractor
import zipfile
import os, sys
from nfs.train_classifier import JSONAttributeExtractor, NeedForSpeedModel
from sklearn.ensemble import RandomForestClassifier
from skmultiflow.meta.adaptive_random_forests import AdaptiveRandomForest as ARFClassifier
import _pickle as cPickle
import gzip
import tempfile
import IPython
from pympler import asizeof
from sklearn import metrics
import humanize
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import f_classif
import warnings
warnings.filterwarnings('ignore')

def load_dataset(name):
	content = None
	with gzip.open(name, 'rb') as fp:
        	content = cPickle.load(fp)
	return content

def count_nodes(RF):
	nodes = 0
	for tree in RF.estimators_:
		nodes = nodes + tree.tree_.node_count
	return nodes

def get_n_confidence(dataset,fraction, clf):
        if fraction == 0:
                return []
        size = int(len(dataset) * fraction/100)
        x = pd.DataFrame(dataset)
        del x['label']
        res = clf.predict_proba(x)
        confs = [x[1] for x in res]
        l1 = np.array(confs)
        l2 = np.array(dataset)
        idx = np.argsort(l1) # no np.flip
        _l1 = list(l1[idx])
        _l2 = list(l2[idx])
        return _l2[:size]
		
if len(sys.argv) !=13:
	print("Usage: python %s -d <dataset> -n <n_start> <n_finish> <n_step> -f <f_start> <f_finish> <f_step> -t <target_dataset>" % sys.argv[0])
	sys.exit(0)

n_start = int(sys.argv[4])
n_end = int(sys.argv[5])
n_step = int(sys.argv[6])
f_start = int(sys.argv[8])
f_end = int(sys.argv[9])
f_step = int(sys.argv[10])

gw  = load_dataset("datasets")
mw  = load_dataset("datasets")

_range2 = [x for x in range(f_start,f_end+1,f_step)]
base = None

for fraction in range(0,100,5):
	_us = get_n_confidence(us_mw,fraction,base)
	_br = get_n_confidence(br_mw,fraction,base)
	_jp = jp_mw
	training = pd.DataFrame(_us + _br + _jp + 2*gw)
	y_train = training['label']

	clf = NeedForSpeedModel(classifier=RandomForestClassifier(n_estimators=n_start,random_state=0, n_jobs=-1))
	training['label'] = y_train
	clf.fit(training, n_features=f_end)
	y_train_pred = clf.predict(training)

	for n_features in _range2:
		clf2 = NeedForSpeedModel(classifier=RandomForestClassifier(n_estimators=n_end,random_state=0, n_jobs=-1))
		training['label'] = y_train_pred
		clf2.fit(training, n_features=n_features)
		y_train_pred2 = clf2.predict(training)
		_acc = metrics.accuracy_score(y_train, y_train_pred2)

		mw = pd.DataFrame(us_mw)
		mw_label =  mw['label']
		del mw['label']
		res = clf2.predict(mw)
		_acc2 = metrics.accuracy_score(mw_label, res)

		mw = pd.DataFrame(br_mw)
		mw_label =  mw['label']
		del mw['label']
		res = clf2.predict(mw)
		_acc3 = metrics.accuracy_score(mw_label, res)

		mw = pd.DataFrame(jp_mw)
		mw_label =  mw['label']
		del mw['label']
		res = clf2.predict(mw)
		_acc4 = metrics.accuracy_score(mw_label, res)

		base = clf2

		sys.stderr.write("Portion %d Feature %d Acc %f US %f BR %f JP %f\n" % (fraction,n_features,_acc,_acc2,_acc3,_acc4))

		if _acc2> 0.99:
			print("[%d] (%d) US: %f" % (fraction,n_features,_acc2))
		if _acc3> 0.99:
			print("[%d] (%d) BR: %f" % (fraction,n_features,_acc3))
		if _acc4> 0.99:
			print("[%d] (%d) JP: %f" % (fraction,n_features,_acc4))

		if _acc >= 0.99 and _acc2> 0.99 and _acc3>0.99 and _acc4>0.99:
			break
