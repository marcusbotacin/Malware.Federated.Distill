import numpy as np
from py4j.java_gateway import JavaGateway
import IPython
import array
import sys
import pandas as pd

def bytearray_from_float_matrix(numpy_matrix):
   header = array.array('i', list(numpy_matrix.shape))
   body = array.array('f', numpy_matrix.flatten().tolist());
   if sys.byteorder != 'big':
      header.byteswap()
      body.byteswap()
   buf = bytearray(header.tostring() + body.tostring())
   return buf

def bytearray_from_int_series(pandas_series):
   header = array.array('i', pandas_series.shape)
   body = array.array('i', pandas_series.tolist());
   if sys.byteorder != 'big':
      header.byteswap()
      body.byteswap()
   buf = bytearray(header.tostring() + body.tostring())
   return buf

class MOA_RF:
    def __init__(self):
        self.gateway = JavaGateway()
        obj = self.gateway.entry_point.SayHello()

    def fit(self, data, labels):
        print("Fitting MOA RF")
        data_java = bytearray_from_float_matrix(data)
        labels_java = bytearray_from_int_series(labels)
        obj = self.gateway.entry_point.fit(data_java,labels_java)
    def predict(self, data):
    # Replace by CapyMOA
        return 0
    def predict_proba(self, data):
    # Replace by CapyMOA
        return [[0.0,0.0]]

class MOA_ARF:
    # Replace by CapyMOA
    def fit(self, data, labels):
        print("Fitting MOA ARF")
        return
    def predict(self, data):
    # Replace by CapyMOA
        return 0
    def predict_proba(self, data):
    # Replace by CapyMOA
        return [[0.0,0.0]]
